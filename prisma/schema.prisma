generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User {
  id            String             @id @default(uuid())
  firstName String 
  LastName String
  email         String             @unique
  profileImage  String
  role          Role               @default(CUSTOMER)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  blogs         Blog[]
  services      Service[]
  orders        Order[]
  bookings      Booking[]
  products      Product[]          @relation("UserProducts") // Backrelation field for Product
  professionalProfile ProfessionalProfile? 
}
model SocialMedia {
  id                    String              @id @default(uuid())
  profileId             String              // Foreign key to ProfessionalProfile
  platform              SocialMediaPlatform // Enum for the platform name
  url                   String              // The URL for the social media profile
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  professionalProfile   ProfessionalProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model VerificationDocument {
  id                    String              @id @default(uuid())
  professionalProfileId String              // Foreign key to ProfessionalProfile
  documentType          DocumentType        // Enum for document types
  documentUrl           String              // URL where the document is stored
  isVerified            Boolean             @default(false) // Indicates if the document has been verified
  verificationMessage   String?             // Optional message from the verifier (e.g., reasons for rejection)
  uploadedAt            DateTime            @default(now())
  verifiedAt            DateTime?           // Timestamp for when the document was verified

  professionalProfile   ProfessionalProfile @relation(fields: [professionalProfileId], references: [id], onDelete: Cascade)
}

model ProfessionalProfile {
  id               String                @id @default(uuid())
  userId           String                @unique  // Ensure userId is unique for one-to-one relation
  professionId     String                // References ProfessionCategory
  businessName   String       // Business name for professionals
  isBusiness     Boolean      // True if the user is a business, false if individual
  experience       Int                   // Years of experience
  bio              String?               // A short bio
  portfolioUrl     String?               // URL to their portfolio
  location         String                // Address or operational area
  availability     String?               // Available hours/days
  isVerified       Boolean               @default(false) // Indicates if the profile is verified
  rating           Float?                // Average rating
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  hasStore         Boolean               @default(false)  // Indicates if the professional has a store

  socialMedia      SocialMedia[]         // One-to-many relationship with SocialMedia model
  documents        VerificationDocument[] // One-to-many relationship with VerificationDocument

  user             User                  @relation(fields: [userId], references: [id])
  profession       ProfessionCategory    @relation(fields: [professionId], references: [id]) // Foreign key to ProfessionCategory

  store            Store[]                @relation
}

enum DocumentType {
  NATIONAL_ID
  BUSINESS_REGISTRATION
  DELIVERY_RECEIPT
  OTHER
}


enum SocialMediaPlatform {
  Facebook
  Twitter
  Instagram
  LinkedIn
  Youtube
  Tiktok
}

model Store {
  id            String     @id @default(uuid())
  name          String     // Store name
  imageUrl      String?    // Store image URL (optional)
  InteriorImageUrl String[]
  workingHours  String     // Working hours (e.g., "Mon-Fri: 9 AM - 6 PM")
  location      String     // Physical store location
  userId        String     @unique // Ensure userId is unique for one-to-one relation
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  professional  ProfessionalProfile @relation(fields: [userId], references: [userId]) // Only define the relation on one side (Store)
}


model ProfessionCategory {
  id          String        @id @default(uuid())
  name        String        @unique // Name of the profession (e.g., Tailor, Designer)
  imageUrl    String? 
  description String?       // Description of the profession category
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  professionals ProfessionalProfile[]
}


enum Role {
  CUSTOMER
  PROFESSIONAL
  OWNER
}

model Product {
  id             String       @id @default(uuid())
  name           String
  description    String?
  price          Float
  stockQuantity  Int?          @default(0)
  imageUrl       String[]
  categoryId     String
  collectionId   String
  professionalId String
  isNew          Boolean      @default(false)
  isFeatured     Boolean?      @default(false)
  isTrending     Boolean?      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  sizes          String[]
  estimatedArrivalTime Int?
  isShipped      Boolean? @default(false)
  category       Category     @relation(fields: [categoryId], references: [id])
  collection     Collection   @relation(fields: [collectionId], references: [id])
  professional   User         @relation("UserProducts", fields: [professionalId], references: [id])
  orderItems     OrderItem[]
}

model Category {
  id           String        @id @default(uuid())
  name         String
  imageUrl     String?
  subcategories Collection[]
  products     Product[]
}

model Collection {
  id          String     @id @default(uuid())
  name        String
  imageUrl    String?
  categoryId  String

  category    Category   @relation(fields: [categoryId], references: [id])
  products    Product[]
}

model Service {
  id              String     @id @default(uuid())
  name            String
  description     String?
  price           Float
  imageUrl        String?
  professionalId  String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  professional    User       @relation(fields: [professionalId], references: [id])
  bookings        Booking[]
}

model Trend {
  id          String       @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  String?
  category    Trendcategory? @relation(fields: [categoryId], references: [id])
}

model Trendcategory {
  id          String            @id @default(uuid())
  name        String
  imageUrl    String?
  subcategories TrendSubcategory[]
  trends      Trend[]
}

model TrendSubcategory {
  id          String           @id @default(uuid())
  name        String
  imageUrl    String?
  categoryId  String
  category    Trendcategory    @relation(fields: [categoryId], references: [id])
}


model Blog {
  id          String   @id @default(uuid())
  title       String
  content     String
  imageUrl    String?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id])
}

model Order {
  id          String       @id @default(uuid())
  customerId  String
  totalPrice  Float
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  customer    User         @relation(fields: [customerId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  price      Float

  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Booking {
  id          String        @id @default(uuid())
  customerId  String
  serviceId   String
  bookingDate DateTime
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  customer    User          @relation(fields: [customerId], references: [id])
  service     Service       @relation(fields: [serviceId], references: [id])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
