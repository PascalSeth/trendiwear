generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  role         UserRole  @default(CUSTOMER)
  profession   Profession? @relation(fields: [professionId], references: [id])
  professionId String?   // UUID reference
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bookings     Booking[]
  services     Service[]  @relation("UserServices")
}

model Profession {
  id                  String              @id @default(uuid())
  name                String              // e.g., Tailor, Designer
  description         String?             // Description of the profession
  specialty           String?             // Specific expertise
  experience          Int?                // Years of experience
  serviceRate         Float?              // Rate for services
  portfolioUrl        String?             // Portfolio or website link
  contactEmail        String?             // Contact email
  contactPhone        String?             // Contact phone number
  location            String?             // Location (city, country)
  availability        String?             // Availability details
  category            ProfessionCategory  @relation(fields: [categoryId], references: [id])
  categoryId          String              // UUID reference to ProfessionCategory
  users               User[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model ProfessionCategory {
  id           String        @id @default(uuid())
  name         String        @unique // e.g., Fashion, Styling
  description  String?       // Optional description
  professions  Profession[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Booking {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id])
  userId      String         // UUID reference
  service     Service        @relation(fields: [serviceId], references: [id])
  serviceId   String         // UUID reference
  date        DateTime
  status      BookingStatus  @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Service {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  professional   User            @relation(fields: [professionalId], references: [id], name: "UserServices")
  professionalId String          // UUID reference
  bookings       Booking[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ProductCategory {
  id          String    @id @default(uuid())
  name        String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FashionTrendCategory {
  id          String    @id @default(uuid())
  name        String
  imageUrl    String
  trends      FashionTrend[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FashionTrend {
  id          String    @id @default(uuid())
  category    FashionTrendCategory @relation(fields: [categoryId], references: [id])
  categoryId  String    // UUID reference
  title       String
  description String
  images      Json   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  String    // UUID reference
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum UserRole {
  CUSTOMER
  PROFESSIONAL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}
