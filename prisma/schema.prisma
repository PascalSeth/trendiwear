generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String             @id @default(uuid())
  name          String
  email         String             @unique
  profileImage  String
  role          Role               @default(CUSTOMER)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  blogs         Blog[]
  services      Service[]
  orders        Order[]
  bookings      Booking[]
  professionalProfile ProfessionalProfile? 
}

model ProfessionalProfile {
  id               String            @id @default(uuid())
  userId           String            @unique
  professionId     String            // References ProfessionCategory
  experience       Int               // Years of experience
  bio              String?           // A short bio
  portfolioUrl     String?           // URL to their portfolio
  location         String            // Address or operational area
  availability     String?           // Available hours/days
  rating           Float?            // Average rating
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  user             User              @relation(fields: [userId], references: [id])
  profession       ProfessionCategory @relation(fields: [professionId], references: [id]) // Foreign key to ProfessionCategory
}

model ProfessionCategory {
  id          String        @id @default(uuid())
  name        String        @unique // Name of the profession (e.g., Tailor, Designer)
  imageUrl    String? 
  description String?       // Description of the profession category
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  professionals ProfessionalProfile[]
}


enum Role {
  CUSTOMER
  PROFESSIONAL
  OWNER
}

model Product {
  id             String       @id @default(uuid())
  name           String
  description    String?
  price          Float
  stockQuantity  Int          @default(0)
  imageUrl       String[]
  categoryId     String
  collectionId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  sizes         String[]  
  category       Category     @relation(fields: [categoryId], references: [id])
  Collection    Collection  @relation(fields: [collectionId], references: [id])
  orderItems     OrderItem[]
}

model Category {
  id           String        @id @default(uuid())
  name         String
  imageUrl     String?
  subcategories Collection[]
  products     Product[]
}

model Collection {
  id          String     @id @default(uuid())
  name        String
  imageUrl    String?
  categoryId  String

  category    Category   @relation(fields: [categoryId], references: [id])
  products    Product[]
}

model Service {
  id              String     @id @default(uuid())
  name            String
  description     String?
  price           Float
  imageUrl        String?
  professionalId  String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  professional    User       @relation(fields: [professionalId], references: [id])
  bookings        Booking[]
}

model Trend {
  id          String       @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  String?
  category    Trendcategory? @relation(fields: [categoryId], references: [id])
}

model Trendcategory {
  id          String            @id @default(uuid())
  name        String
  imageUrl    String?
  subcategories TrendSubcategory[]
  trends      Trend[]
}

model TrendSubcategory {
  id          String           @id @default(uuid())
  name        String
  imageUrl    String?
  categoryId  String
  category    Trendcategory    @relation(fields: [categoryId], references: [id])
}


model Blog {
  id          String   @id @default(uuid())
  title       String
  content     String
  imageUrl    String?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id])
}

model Order {
  id          String       @id @default(uuid())
  customerId  String
  totalPrice  Float
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  customer    User         @relation(fields: [customerId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  price      Float

  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Booking {
  id          String        @id @default(uuid())
  customerId  String
  serviceId   String
  bookingDate DateTime
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  customer    User          @relation(fields: [customerId], references: [id])
  service     Service       @relation(fields: [serviceId], references: [id])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
