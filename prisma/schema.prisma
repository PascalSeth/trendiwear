generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================================
// USER MANAGEMENT
// ================================

model User {
  id            String             @id @default(uuid())
  firstName     String 
  lastName      String
  email         String             @unique
  phone         String?
  profileImage  String?
  role          Role               @default(CUSTOMER)
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // Customer Relations
  orders                Order[]
  reviews               Review[]
  wishlist              WishlistItem[]
  cart                  CartItem[]
  addresses             Address[]
  measurements          Measurement?
  savedOutfits          SavedOutfit[]
  notifications         Notification[]
  deliveryConfirmations DeliveryConfirmation[]
  paymentEscrows        PaymentEscrow[]
  conversations_customer Conversation[] @relation("CustomerConversations")
  conversations_professional Conversation[] @relation("ProfessionalConversations")
  messages              Message[]
  bookingCustomers      Booking[]       @relation("BookingCustomer")
  bookingProfessionals  Booking[]       @relation("BookingProfessional")
  recommendations       UserRecommendation[]
  auditLogs             AuditLog[]
  reportedContent       ReportedContent[]

  // Professional Relations
  professionalProfile   ProfessionalProfile?
  products              Product[]
  professionalServices  ProfessionalService[]
  blogs                 Blog[]
  outfitInspirations    OutfitInspiration[]
  analytics             ProfessionalAnalytics?

  // Analytics Relations
  searches              UserSearch[]
  movements             UserMovement[]

  // Social Relations
  profileExtension      UserProfileExtension?
  postComments          PostComment[]
  postLikes             PostLike[]
  challengeSubmissions  ChallengeSubmission[]
  challengeVotes        ChallengeVote[]
  liveStreams           LiveStream[]
  streamChatMessages    StreamChatMessage[]
}

model Address {
  id          String      @id @default(uuid())
  userId      String
  type        AddressType @default(HOME)
  firstName   String
  lastName    String
  street      String
  city        String
  state       String
  zipCode     String
  country     String      @default("Kenya")
  isDefault   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
}

model Measurement {
  id          String   @id @default(uuid())
  userId      String   @unique
  // Detailed measurements (optional)
  bust        Float?
  waist       Float?
  hips        Float?
  shoulder    Float?
  armLength   Float?
  inseam      Float?
  height      Float?
  weight      Float?
  // Standard sizes for quick personalization
  topSize     String?        // XS, S, M, L, XL, XXL
  bottomSize  String?        // XS, S, M, L, XL, XXL
  dressSize   String?        // XS, S, M, L, XL, XXL
  shoeSize    String?        // UK/US/EU sizes
  // Style preferences for personalized search
  bodyType    BodyType?
  stylePreferences StylePreference[]
  preferredColors  String[]   // Array of preferred colors
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ================================
// PROFESSIONAL PROFILES
// ================================

model ProfessionalProfile {
  id               String                @id @default(uuid())
  userId           String                @unique
  businessName     String
  businessImage    String?
  specializationId String
  experience       Int
  bio              String?
  portfolioUrl     String?
  latitude         Float?
  longitude        Float?
  location         String?               // Human-readable address
  availability     String?
  isVerified       Boolean               @default(false)
  rating           Float?                @default(0)
  totalReviews     Int                   @default(0)
  completedOrders  Int                   @default(0)
  accountBalance   Float                 @default(0)
  freeDeliveryThreshold Float?           // Minimum order amount for free delivery
  slug             String?               @unique  // For direct URL access
  spotlightVideoUrl String?              // Promotional video/content
  creditScore      Float                 @default(0)  // Calculated from reviews
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt

  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization   ProfessionalType      @relation(fields: [specializationId], references: [id])
  socialMedia      SocialMedia[]
  documents        VerificationDocument[]
  store            Store?
  deliveryZones    DeliveryZone[]
}

model DeliveryZone {
  id                String              @id @default(uuid())
  professionalId    String
  zoneName          String              // e.g., "Downtown", "Suburbs"
  baseDeliveryFee   Float
  freeDeliveryAbove Float?              // Free delivery above this amount
  estimatedDays     Int                 // Estimated delivery days
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  professional      ProfessionalProfile @relation(fields: [professionalId], references: [id], onDelete: Cascade)
}

model SocialMedia {
  id                    String                @id @default(uuid())
  professionalId        String
  platform              SocialMediaPlatform
  url                   String
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  professional          ProfessionalProfile   @relation(fields: [professionalId], references: [id], onDelete: Cascade)
}

model VerificationDocument {
  id                    String              @id @default(uuid())
  professionalId        String
  documentType          DocumentType
  documentUrl           String
  isVerified            Boolean             @default(false)
  verificationMessage   String?
  uploadedAt            DateTime            @default(now())
  verifiedAt            DateTime?

  professional          ProfessionalProfile @relation(fields: [professionalId], references: [id], onDelete: Cascade)
}

model Store {
  id               String              @id @default(uuid())
  professionalId   String              @unique
  name             String
  imageUrl         String?
  interiorImages   String[]
  workingHours     String
  location         String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  professional     ProfessionalProfile @relation(fields: [professionalId], references: [id], onDelete: Cascade)
}

// ================================
// PRODUCT MANAGEMENT
// ================================

model Product {
  id                   String       @id @default(uuid())
  name                 String
  description          String?
  price                Float
  currency             String       @default("GHS")  // Currency code (GHS, USD, EUR, GBP, KES, etc.)
  stockQuantity        Int          @default(0)
  images               String[]     // Multiple product images (max 4)
  videoUrl             String?      // Single product video
  categoryId           String
  collectionId         String?
  professionalId       String
  sizes                String[]     // Available sizes [XS, S, M, L, XL]
  colors               String[]     // Available colors
  material             String?
  careInstructions     String?
  estimatedDelivery    Int?         // days for production/shipping
  isCustomizable       Boolean      @default(false)
  tags                 ProductTag[] // TRENDING, NEW, BESTSELLER, etc.
  isUnisex             Boolean      @default(true)
  isActive             Boolean      @default(true)
  isInStock            Boolean      @default(true)
  viewCount            Int          @default(0)    // Track product views
  wishlistCount        Int          @default(0)    // Track wishlist additions
  cartCount            Int          @default(0)    // Track cart additions
  soldCount            Int          @default(0)    // Track sales
  // Discount/Promotion fields
  discountPercentage   Float?       // Percentage discount (e.g., 20 for 20% off)
  discountPrice        Float?       // Fixed discounted price (alternative to percentage)
  discountStartDate    DateTime?    // When discount becomes active
  discountEndDate      DateTime?    // When discount expires
  isOnSale             Boolean      @default(false) // Quick flag for active promotions
  // Showcase approval fields
  submittedForShowcase Boolean      @default(false)
  isShowcaseApproved   Boolean      @default(false)
  submittedAt          DateTime?
  approvedAt           DateTime?
  approvedBy           String?      // Super admin who approved
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  category             Category     @relation(fields: [categoryId], references: [id])
  collection           Collection?  @relation(fields: [collectionId], references: [id])
  professional         User         @relation(fields: [professionalId], references: [id])
  orderItems           OrderItem[]
  wishlistItems        WishlistItem[]
  cartItems            CartItem[]
  outfitProducts       OutfitProduct[]
  analytics            ProductAnalytics?
  recommendations      UserRecommendation[]
  socialPosts          SocialPost[]
  performance          ProductPerformance[]
}

model Category {
  id           String        @id @default(uuid())
  name         String        @unique  // MEN, WOMEN, ACCESSORIES, BAGS, SHOES
  slug         String        @unique
  description  String?
  imageUrl     String?
  parentId     String?       // For sub-categories
  isActive     Boolean       @default(true)
  order        Int           @default(0)  // For ordering categories
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  parent       Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]    @relation("CategoryHierarchy")
  collections  Collection[]
  products     Product[]
}

model Collection {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  imageUrl    String?
  categoryId  String
  season      Season?    // Optional seasonal collection
  isActive    Boolean    @default(true)
  isFeatured  Boolean    @default(false)
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  category    Category   @relation(fields: [categoryId], references: [id])
  products    Product[]
}

// ================================
// SERVICES
// ================================

model Service {
  id              String          @id @default(uuid())
  name            String
  description     String?
  duration        Int             // minutes
  imageUrl        String?
  categoryId      String
  isHomeService   Boolean         @default(false)  // Can be done at customer's location
  requirements    String?         // What customer needs to bring/prepare
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  category        ServiceCategory @relation(fields: [categoryId], references: [id])
  professionalServices ProfessionalService[]
  bookings        Booking[]
}

model ProfessionalService {
  id             String   @id @default(uuid())
  professionalId String
  serviceId      String
  price          Float    // Professional sets their own price
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  professional   User     @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  service        Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([professionalId, serviceId])
}

model ServiceCategory {
  id          String     @id @default(uuid())
  name        String     @unique  // TAILORING, STYLING, DESIGN_CONSULTATION, etc.
  description String?
  imageUrl    String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  services    Service[]
}

// ================================
// FASHION INSPIRATION & EVENTS
// ================================

model Event {
  id               String            @id @default(uuid())
  name             String            @unique  // OFFICE, ROMANTIC, STREETWEAR, WEDDING, etc.
  description      String?
  imageUrl         String?
  dressCodes       String[]
  seasonality      Season[]
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  outfitInspirations OutfitInspiration[]
}

model OutfitInspiration {
  id              String         @id @default(uuid())
  eventId         String
  stylistId       String
  title           String
  description     String?
  outfitImageUrl  String         // Main styled outfit photo
  totalPrice      Float?         // Optional total price of all items
  tags            String[]       // Style tags like "elegant", "casual", "trendy"
  likes           Int            @default(0)
  views           Int            @default(0)
  isActive        Boolean        @default(true)
  isFeatured      Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  event           Event          @relation(fields: [eventId], references: [id])
  stylist         User           @relation(fields: [stylistId], references: [id])
  products        OutfitProduct[]
  savedByUsers    SavedOutfit[]
  socialPosts     SocialPost[]
}

model OutfitProduct {
  id              String           @id @default(uuid())
  outfitId        String
  productId       String
  position        Int?             // Position of product in outfit (for styling)
  notes           String?          // Styling notes for this specific item

  outfit          OutfitInspiration @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  product         Product          @relation(fields: [productId], references: [id])

  @@unique([outfitId, productId])
}

model SavedOutfit {
  id         String            @id @default(uuid())
  userId     String
  outfitId   String
  createdAt  DateTime          @default(now())

  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfit     OutfitInspiration @relation(fields: [outfitId], references: [id], onDelete: Cascade)

  @@unique([userId, outfitId])
}

// ================================
// ORDERS & BOOKINGS
// ================================

model Order {
  id              String       @id @default(uuid())
  customerId      String
  addressId       String
  subtotal        Float
  shippingCost    Float        @default(0)
  tax             Float        @default(0)
  totalPrice      Float
  status          OrderStatus  @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  trackingNumber  String?
  estimatedDelivery DateTime?
  actualDelivery  DateTime?
  deliveryZone    String?      // Which delivery zone was used
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  customer        User         @relation(fields: [customerId], references: [id])
  address         Address      @relation(fields: [addressId], references: [id])
  items           OrderItem[]
  deliveryConfirmation DeliveryConfirmation?
  paymentEscrow   PaymentEscrow?
  coupons         OrderCoupon[]
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  professionalId String  // To track which professional gets paid
  quantity   Int
  size       String?
  color      String?
  price      Float
  notes      String?

  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([orderId, productId, size, color])
}

model DeliveryConfirmation {
  id              String          @id @default(uuid())
  orderId         String          @unique
  customerId      String
  professionalId  String
  status          ConfirmationStatus @default(PENDING)
  customerConfirmed Boolean       @default(false)
  confirmationDeadline DateTime   // 2 days from delivery
  createdAt       DateTime        @default(now())
  confirmedAt     DateTime?
  
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  customer        User            @relation(fields: [customerId], references: [id])
}

model PaymentEscrow {
  id              String          @id @default(uuid())
  orderId         String          @unique
  professionalId  String
  amount          Float
  status          EscrowStatus    @default(HELD)
  releaseDate     DateTime?       // When funds will be released
  releasedAt      DateTime?
  createdAt       DateTime        @default(now())
  
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  professional    User            @relation(fields: [professionalId], references: [id])
}

model Booking {
  id             String        @id @default(uuid())
  customerId     String
  serviceId      String
  professionalId String
  bookingDate    DateTime
  endTime        DateTime?     // Calculated from service duration
  location       String?       // If it's a home service
  notes          String?
  status         BookingStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  customer       User          @relation("BookingCustomer", fields: [customerId], references: [id])
  service        Service       @relation(fields: [serviceId], references: [id])
  professional   User          @relation("BookingProfessional", fields: [professionalId], references: [id])
}

// ================================
// SHOPPING FEATURES
// ================================

model WishlistItem {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model CartItem {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  quantity   Int      @default(1)
  size       String?
  color      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, size, color])
}

// ================================
// REVIEWS & CONTENT
// ================================

model Review {
  id          String     @id @default(uuid())
  userId      String
  targetId    String     // Can be product, service, or professional
  targetType  ReviewType
  orderId     String?    // Link to order for verified purchases
  rating      Int        // 1-5
  title       String?
  comment     String?
  images      String[]
  isVerified  Boolean    @default(false)  // Verified purchase
  helpfulCount Int       @default(0)      // How many found it helpful
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id])

  @@unique([userId, targetId, targetType])
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  imageUrl    String?
  tags        String[]
  authorId    String
  categoryId  String?  // Blog categories
  isPublished Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id])
}

// ================================
// NOTIFICATIONS
// ================================

model Notification {
  id          String           @id @default(uuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  data        Json?            // Additional data for the notification
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())

  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ================================
// ANALYTICS & TRACKING
// ================================

model ProductAnalytics {
  id            String   @id @default(uuid())
  productId     String   @unique
  totalViews    Int      @default(0)
  totalWishlisted Int    @default(0)
  totalCartAdds Int      @default(0)
  totalPurchases Int     @default(0)
  conversionRate Float   @default(0)  // purchases/views
  avgRating     Float    @default(0)
  lastUpdated   DateTime @updatedAt
  createdAt     DateTime @default(now())

  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProfessionalAnalytics {
  id              String   @id @default(uuid())
  professionalId  String   @unique
  totalOrders     Int      @default(0)
  totalRevenue    Float    @default(0)
  avgOrderValue   Float    @default(0)
  totalBookings   Int      @default(0)
  completedOrders Int      @default(0)
  cancelledOrders Int      @default(0)
  avgRating       Float    @default(0)
  profileViews    Int      @default(0)
  responseRate    Float    @default(100)  // Percentage of responded bookings
  onTimeDelivery  Float    @default(100)  // Percentage of on-time deliveries
  lastUpdated     DateTime @updatedAt
  createdAt       DateTime @default(now())

  professional    User     @relation(fields: [professionalId], references: [id], onDelete: Cascade)
}

// ================================
// PROMOTIONAL FEATURES
// ================================

model Coupon {
  id              String     @id @default(uuid())
  code            String     @unique
  description     String?
  type            CouponType
  value           Float      // Percentage or fixed amount
  minOrderAmount  Float?     // Minimum order to apply coupon
  maxDiscount     Float?     // Maximum discount for percentage coupons
  usageLimit      Int?       // Total usage limit
  usedCount       Int        @default(0)
  isActive        Boolean    @default(true)
  validFrom       DateTime
  validUntil      DateTime
  applicableCategories String[] // Category IDs where applicable
  applicableProfessionals String[] // Professional IDs where applicable
  createdBy       String     // Admin who created it
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  orders          OrderCoupon[]
}

model OrderCoupon {
  id         String  @id @default(uuid())
  orderId    String
  couponId   String
  discount   Float   // Actual discount applied

  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  coupon     Coupon  @relation(fields: [couponId], references: [id])

  @@unique([orderId, couponId])
}

// ================================
// COMMUNICATION SYSTEM
// ================================

model Conversation {
  id              String    @id @default(uuid())
  customerId      String
  professionalId  String
  subject         String?
  lastMessageAt   DateTime  @default(now())
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  customer        User      @relation("CustomerConversations", fields: [customerId], references: [id])
  professional    User      @relation("ProfessionalConversations", fields: [professionalId], references: [id])
  messages        Message[]

  @@unique([customerId, professionalId])
}

model Message {
  id               String       @id @default(uuid())
  conversationId   String
  senderId         String
  content          String
  attachments      String[]     // URLs to attached files/images
  isRead           Boolean      @default(false)
  createdAt        DateTime     @default(now())

  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender           User         @relation(fields: [senderId], references: [id])
}

// ================================
// FASHION TRENDS & RECOMMENDATIONS
// ================================

model TrendingSearch {
  id          String   @id @default(uuid())
  searchTerm  String   @unique
  searchCount Int      @default(1)
  category    String?  // Which category it's trending in
  lastSearched DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model UserSearch {
  id          String   @id @default(uuid())
  userId      String?
  searchTerm  String
  category    String?
  resultsCount Int     @default(0)
  sessionId   String?  // For tracking user sessions
  ipAddress   String?
  userAgent   String?
  searchedAt  DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model UserMovement {
  id            String         @id @default(uuid())
  userId        String?
  action        UserAction
  targetType    MovementTarget // PRODUCT, CATEGORY, PROFESSIONAL, etc.
  targetId      String
  referrer      String?        // Where they came from
  sessionId     String?
  ipAddress     String?
  userAgent     String?
  metadata      Json?          // Additional data like product details, search terms, etc.
  createdAt     DateTime       @default(now())

  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model ProductPerformance {
  id                String   @id @default(uuid())
  productId         String   @unique
  professionalId    String
  date              DateTime // Date for this performance record
  views             Int      @default(0)
  searches          Int      @default(0)
  wishlists         Int      @default(0)
  cartAdds          Int      @default(0)
  purchases         Int      @default(0)
  revenue           Float    @default(0)
  conversionRate    Float    @default(0)
  avgRating         Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, date])
}

model UserRecommendation {
  id            String   @id @default(uuid())
  userId        String
  productId     String
  score         Float    @default(0)  // Recommendation score
  reason        String?  // Why recommended (similar purchases, style match, etc.)
  isViewed      Boolean  @default(false)
  isInteracted  Boolean  @default(false)  // Clicked, wishlisted, etc.
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// ================================
// SURVEY SYSTEM
// ================================

model SurveyResponse {
  id              String          @id @default(uuid())
  surveyType      SurveyType      // BUYER or SELLER
  respondentEmail String?         // Optional for anonymous responses
  respondentName  String?         // Optional
  isAnonymous     Boolean         @default(true)
  ipAddress       String?         // For analytics
  userAgent       String?         // Browser/device info
  completedAt     DateTime?       // When survey was completed
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  answers         SurveyAnswer[]
}

model SurveyQuestion {
  id          String        @id @default(uuid())
  surveyType  SurveyType
  section     String        // Section name (e.g., "Current Shopping Methods")
  question    String        // The actual question text
  questionType QuestionType // TEXT, MULTIPLE_CHOICE, CHECKBOX, etc.
  options     String[]      // For multiple choice questions
  isRequired  Boolean       @default(false)
  order       Int           @default(0)  // Question order in survey
  createdAt   DateTime      @default(now())

  answers     SurveyAnswer[]
}

model SurveyAnswer {
  id            String   @id @default(uuid())
  responseId    String
  questionId    String
  answerText    String?  // For text answers
  selectedOptions String[] // For multiple choice/checkbox answers
  createdAt     DateTime @default(now())

  response      SurveyResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question      SurveyQuestion @relation(fields: [questionId], references: [id])

  @@unique([responseId, questionId])
}

// ================================
// SOCIAL COMMERCE FEATURES
// ================================

model UserProfileExtension {
  id                String          @id @default(uuid())
  userId            String          @unique
  bio               String?
  stylePreferences  StylePreference[]
  portfolioImages   String[]
  socialLinks       SocialLinkExtension[]
  followerCount     Int             @default(0)
  followingCount    Int             @default(0)
  reputationScore   Int             @default(0)
  level             Int             @default(1)
  experiencePoints  Int             @default(0)
  badges            UserBadge[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts             SocialPost[]
  followers         Follow[]        @relation("Following")
  following         Follow[]        @relation("Follower")
}

model SocialLinkExtension {
  id                String              @id @default(uuid())
  userProfileId     String
  platform          SocialMediaPlatform
  url               String
  createdAt         DateTime            @default(now())

  userProfile       UserProfileExtension @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model Follow {
  id            String   @id @default(uuid())
  followerId    String
  followingId   String
  createdAt     DateTime @default(now())

  follower      UserProfileExtension @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following     UserProfileExtension @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model SocialPost {
  id          String     @id @default(uuid())
  authorId    String
  type        PostType
  title       String?
  content     String?
  images      String[]
  tags        String[]
  productId   String?    // Link to product if it's a product share
  outfitId    String?    // Link to outfit inspiration
  likes       Int        @default(0)
  shares      Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  author      UserProfileExtension @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    PostComment[]
  likes_rel   PostLike[]
  product     Product?   @relation(fields: [productId], references: [id])
  outfit      OutfitInspiration? @relation(fields: [outfitId], references: [id])
}

model PostComment {
  id        String   @id @default(uuid())
  postId    String
  authorId  String
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())

  post      SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User       @relation(fields: [authorId], references: [id])
}

model PostLike {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post      SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model CommunityChallenge {
  id            String                @id @default(uuid())
  title         String
  description   String
  imageUrl      String?
  startDate     DateTime
  endDate       DateTime
  rewardType    ChallengeRewardType
  rewardValue   String                // Points, badge, discount, etc.
  maxParticipants Int?
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  submissions   ChallengeSubmission[]
}

model ChallengeSubmission {
  id            String            @id @default(uuid())
  challengeId   String
  userId        String
  title         String
  description   String?
  images        String[]
  votes         Int               @default(0)
  isWinner      Boolean           @default(false)
  createdAt     DateTime          @default(now())

  challenge     CommunityChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user          User               @relation(fields: [userId], references: [id])
  votes_rel     ChallengeVote[]
}

model ChallengeVote {
  id            String   @id @default(uuid())
  submissionId  String
  userId        String
  createdAt     DateTime @default(now())

  submission    ChallengeSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([submissionId, userId])
}

model LiveStream {
  id            String        @id @default(uuid())
  hostId        String
  title         String
  description   String?
  streamKey     String        @unique
  scheduledTime DateTime?
  startTime     DateTime?
  endTime       DateTime?
  viewers       Int           @default(0)
  isLive        Boolean       @default(false)
  isRecorded    Boolean       @default(false)
  recordingUrl  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  host          User          @relation(fields: [hostId], references: [id])
  chatMessages  StreamChatMessage[]
}

model StreamChatMessage {
  id        String   @id @default(uuid())
  streamId  String
  userId    String
  message   String
  createdAt DateTime @default(now())

  stream    LiveStream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])
}

model UserBadge {
  id          String   @id @default(uuid())
  userId      String
  badgeId     String
  earnedAt    DateTime @default(now())

  user        UserProfileExtension @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge       Badge    @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
}

model Badge {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  iconUrl     String
  category    BadgeCategory
  pointsRequired Int?   // For level-based badges
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  users       UserBadge[]
}

// ================================
// SYSTEM ADMINISTRATION
// ================================

model SystemSetting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  updatedBy   String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model AuditLog {
  id          String    @id @default(uuid())
  userId      String?
  action      String    // CREATE, UPDATE, DELETE, LOGIN, etc.
  entity      String?   // Product, Order, User, etc.
  entityId    String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  user        User?     @relation(fields: [userId], references: [id])
}

model ReportedContent {
  id          String        @id @default(uuid())
  reporterId  String
  contentType ContentType   // PRODUCT, REVIEW, BLOG, etc.
  contentId   String
  reason      ReportReason
  description String?
  status      ReportStatus  @default(PENDING)
  reviewedBy  String?
  reviewedAt  DateTime?
  resolution  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  reporter    User          @relation(fields: [reporterId], references: [id])
}

// ================================
// ENUMS
// ================================

enum Role {
  CUSTOMER
  PROFESSIONAL
  ADMIN
  SUPER_ADMIN
}

model ProfessionalType {
  id            String              @id @default(uuid())
  name          String              @unique
  description   String?
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  professionals ProfessionalProfile[]
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum DocumentType {
  NATIONAL_ID
  BUSINESS_REGISTRATION
  PORTFOLIO
  CERTIFICATION
  TAX_CERTIFICATE
  OTHER
}

enum SocialMediaPlatform {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  YOUTUBE
  TIKTOK
  PINTEREST
  WHATSAPP
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  DISPUTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum ReviewType {
  PRODUCT
  SERVICE
  PROFESSIONAL
}

enum NotificationType {
  ORDER_UPDATE
  BOOKING_CONFIRMATION
  NEW_INSPIRATION
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  PROMOTION
  SYSTEM_UPDATE
  DELIVERY_CONFIRMATION_REQUEST
  PAYMENT_RELEASED
  MESSAGE_RECEIVED
  WISHLIST_SALE
  STOCK_ALERT
  SHIPPING_UPDATE
  DELIVERY_ARRIVAL
}

enum Season {
  SPRING
  SUMMER
  FALL
  WINTER
  ALL_SEASON
}

enum BodyType {
  PEAR
  APPLE
  HOURGLASS
  RECTANGLE
  INVERTED_TRIANGLE
  OVAL
}

enum StylePreference {
  CASUAL
  FORMAL
  BUSINESS
  BOHEMIAN
  MINIMALIST
  VINTAGE
  TRENDY
  CLASSIC
  STREETWEAR
  ROMANTIC
  EDGY
  PREPPY
}

enum ProductTag {
  NEW
  TRENDING
  BESTSELLER
  SALE
  LIMITED_EDITION
  CUSTOM_MADE
  ECO_FRIENDLY
  HANDMADE
  FEATURED
}


enum ConfirmationStatus {
  PENDING
  CONFIRMED
  EXPIRED
  DISPUTED
}

enum EscrowStatus {
  HELD
  RELEASED
  REFUNDED
  DISPUTED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_ONE_GET_ONE
}

enum ContentType {
  PRODUCT
  REVIEW
  BLOG
  COMMENT
  MESSAGE
  PROFILE
  OUTFIT_INSPIRATION
}

enum ReportReason {
  INAPPROPRIATE_CONTENT
  SPAM
  FAKE_PRODUCT
  COPYRIGHT_VIOLATION
  HARASSMENT
  MISLEADING_INFORMATION
  QUALITY_ISSUES
  OTHER
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  REJECTED
  ESCALATED
}

enum SurveyType {
  BUYER
  SELLER
}

enum QuestionType {
  TEXT
  TEXTAREA
  MULTIPLE_CHOICE
  CHECKBOX
  RATING
  YES_NO
}

enum PostType {
  OUTFIT
  PRODUCT
  CHALLENGE
  TUTORIAL
  GENERAL
  POLL
}

enum ChallengeRewardType {
  POINTS
  BADGE
  DISCOUNT
  FEATURED_POST
  EXCLUSIVE_ACCESS
}

enum BadgeCategory {
  ACHIEVEMENT
  SOCIAL
  COMMERCE
  CREATIVE
  COMMUNITY
}

enum UserAction {
  VIEW_PRODUCT
  ADD_TO_WISHLIST
  ADD_TO_CART
  PURCHASE
  SEARCH
  VIEW_CATEGORY
  VIEW_PROFESSIONAL
  BOOK_SERVICE
  LEAVE_REVIEW
  SHARE_PRODUCT
  FOLLOW_USER
}

enum MovementTarget {
  PRODUCT
  CATEGORY
  COLLECTION
  PROFESSIONAL
  SERVICE
  OUTFIT_INSPIRATION
  BLOG_POST
  SEARCH_RESULT
  CART
  WISHLIST
}