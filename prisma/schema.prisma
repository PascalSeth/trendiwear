generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid()) // Changed to UUID
  name         String
  email        String    @unique
  password     String
  role         UserRole  @default(CUSTOMER)
  profession   Profession? @relation(fields: [professionId], references: [id])
  professionId String?   // Changed to String for UUID reference
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bookings     Booking[]
  services     Service[]  @relation("UserServices") // Added reverse relation field for services
}

model Profession {
  id             String    @id @default(uuid()) // Changed to UUID
  name           String    // e.g., Tailor, Fashion Designer, Stylist
  description    String?   // Optional field to describe the profession
  specialty      String?   // Specific expertise within the profession (e.g., Wedding Dresses, Haute Couture, Casual Wear)
  experience     Int?      // Years of experience in the profession
  serviceRate    Float?    // Rate charged for services (per hour or per project)
  portfolioUrl   String?   // Link to the professionalâ€™s portfolio or website
  contactEmail   String?   // Contact email for business inquiries
  contactPhone   String?   // Phone number for business inquiries
  location       String?   // Geographical location (city, country) where the professional operates
  availability   String?   // Availability status or hours of operation
  users          User[]    // Relationship to the User model (professionals linked to this profession)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Booking {
  id          String    @id @default(uuid()) // Changed to UUID
  user        User      @relation(fields: [userId], references: [id])
  userId      String    // Changed to String for UUID reference
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   String    // Changed to String for UUID reference
  date        DateTime
  status      BookingStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id            String    @id @default(uuid()) // Changed to UUID
  name          String
  description   String
  price         Float
  professional  User       @relation(fields: [professionalId], references: [id], name: "UserServices") 
  professionalId String    // Changed to String for UUID reference
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ProductCategory {
  id          String    @id @default(uuid()) // Changed to UUID
  name        String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FashionTrendCategory {
  id          String    @id @default(uuid()) // Changed to UUID
  name        String
  imageUrl    String
  trends      FashionTrend[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FashionTrend {
  id          String    @id @default(uuid()) // Changed to UUID
  category    FashionTrendCategory @relation(fields: [categoryId], references: [id])
  categoryId  String    // Changed to String for UUID reference
  title       String
  description String
  images      Json   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String    @id @default(uuid()) // Changed to UUID
  name        String
  description String
  price       Float
  stock       Int
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  String    // Changed to String for UUID reference
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum UserRole {
  CUSTOMER
  PROFESSIONAL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}
